import {async, ComponentFixture, TestBed} from '@angular/core/testing';import {SettingsComponent} from './settings.component';import {DataModelService} from '../../DataModel/data-model.service';import {Currency} from '../../DataModel/Utils/Currency';import {MatrixBasicDataService} from '../../ServerCommunication/CommunicationInterface/matrix-basic-data.service';import {User} from '../../DataModel/User/User';import {Language} from '../../DataModel/Utils/Language';import {MatDialog} from '@angular/material/dialog';import {MockDialog} from '../_mockServices/MockDialog';import {SuccessfulResponse} from '../../ServerCommunication/Response/SuccessfulResponse';import {DialogProviderService} from '../dialog-provider.service';import {UnsuccessfulResponse} from '../../ServerCommunication/Response/UnsuccessfulResponse';describe('SettingsComponent', () => {  let component: SettingsComponent;  let fixture: ComponentFixture<SettingsComponent>;  let dataModelService: jasmine.SpyObj<DataModelService>;  let matrixBasicDataService: jasmine.SpyObj<MatrixBasicDataService>;  let dialogProviderService: jasmine.SpyObj<DialogProviderService>;  beforeEach(async(() => {    const spyData = jasmine.createSpyObj('DataModelService', ['getUser']);    const spyMatrix = jasmine.createSpyObj('MatrixBasicDataService', ['userChangeDefaultCurrency']);    const spyDialog = jasmine.createSpyObj('DialogProviderService', ['openErrorModal']);    TestBed.configureTestingModule({      declarations: [ SettingsComponent ],      providers: [        { provide: MatDialog, useValue: MockDialog },        { provide: DataModelService, useValue: spyData },        { provide: MatrixBasicDataService, useValue: spyMatrix },        { provide: DialogProviderService, useValue: spyDialog }      ]    })    .compileComponents();    dataModelService = TestBed.inject(DataModelService) as jasmine.SpyObj<DataModelService>;    matrixBasicDataService = TestBed.inject(MatrixBasicDataService) as jasmine.SpyObj<MatrixBasicDataService>;    dialogProviderService = TestBed.inject(DialogProviderService) as jasmine.SpyObj<DialogProviderService>;    fixture = TestBed.createComponent(SettingsComponent);    component = fixture.componentInstance;  }));  it ('check if settings get correctly initialised', () => {    const stubValue = new User(null, Currency.USD, Language.GERMAN);    dataModelService.getUser.and.returnValue(stubValue);    fixture.detectChanges();    expect(component.selectedCurrency).toBe(stubValue.currency);  });  it ('check successfull apply',  () => {    const stubValue = new User(null, Currency.USD, Language.GERMAN);    dataModelService.getUser.and.returnValue(stubValue);    matrixBasicDataService.userChangeDefaultCurrency.and.returnValue(Promise.resolve(new SuccessfulResponse()));    fixture.detectChanges();    expect(component.selectedCurrency).toBe(stubValue.currency);    component.selectedCurrency = Currency.EUR;    fixture.detectChanges();    component.applySettings();    expect(matrixBasicDataService.userChangeDefaultCurrency).toHaveBeenCalled();    expect(dialogProviderService.openErrorModal).not.toHaveBeenCalled();  });  /*it ('check unsuccessfull apply',  () => {    const stubValue = new User(null, Currency.USD, Language.GERMAN);    dataModelService.getUser.and.returnValue(stubValue);    matrixBasicDataService.userChangeDefaultCurrency.and.returnValue(Promise.resolve(new UnsuccessfulResponse()));    fixture.detectChanges();    expect(component.selectedCurrency).toBe(stubValue.currency);    component.selectedCurrency = Currency.EUR;    fixture.detectChanges();    component.applySettings();    expect(matrixBasicDataService.userChangeDefaultCurrency).toHaveBeenCalled();    console.log(dialogProviderService);    fixture.detectChanges();    expect(dialogProviderService.openErrorModal).toHaveBeenCalled();  });*/});